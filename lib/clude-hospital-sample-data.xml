String fileExtension = "";
                                    if (fileName.lastIndexOf(".") != -1) {
                                        fileExtension = fileName.substring(fileName.lastIndexOf("."));
                                    }
                                    
                                    // Create temporary file
                                    String fileNamePrefix = fieldName + "_" + firstName + "_" + lastName + "_";
                                    fileNamePrefix = fileNamePrefix.replaceAll("\\s+", "_"); // Replace spaces with underscores
                                    File tempFile = File.createTempFile(fileNamePrefix, fileExtension, tempDir);
                                    
                                    // Write to temporary file
                                    item.write(tempFile);


---------------
fileInfo.put("tempFile", tempFile);
------------------

for (int i = 0; i < uploadedFiles.size(); i++) {
                            Map<String, Object> fileInfo = (Map<String, Object>)uploadedFiles.get(i);
                            File tempFile = (File)fileInfo.get("tempFile");
                            
                            EmailAttachment attachment = new EmailAttachment();
                            attachment.setPath(tempFile.getAbsolutePath());
                            attachment.setName((String)fileInfo.get("originalFileName"));
                            attachment.setDisposition(EmailAttachment.ATTACHMENT);
                            smToCsAdmin.attach(attachment);
                        }

---------------------------------

for (int i = 0; i < uploadedFiles.size(); i++) {
                        Map<String, Object> fileInfo = (Map<String, Object>)uploadedFiles.get(i);
                        File tempFile = (File)fileInfo.get("tempFile");
                        tempFile.delete();
                    }

<p style='margin: 15px 0; line-height: 1.6; color: #5a6872;'>Thank you for reaching out to us!</p>
        
<p style='margin: 15px 0; line-height: 1.6; color: #5a6872;'>For product or service inquiries, our support team is ready to assist you at <span style='color: #f5a623; font-weight: bold;'>+63 (2) 887 5433</span> or <span style='color: #f5a623; font-weight: bold;'>1-800-10-7785465</span>.</p>
        
<p style='margin: 15px 0; line-height: 1.6; color: #5a6872;'>If you would like to visit a Pru Life UK branch, you can find your nearest location <a href='https://www.prulifeuk.com.ph/en/contact-us/branch-general-agency-directory/' target='_blank' style='color: #5a6872; text-decoration: underline; text-decoration-color: #ff0000; text-underline-offset: 3px; color: #ff0000;'>here</a>.</p>

----------------------------------------

Change rename : Select your transaction.

---------------------------------------
 Change Beneficiary ​
Change Method of Payment to Auto-Debit-Arrangement (ADA) or Direct debit​
Change Method of Payment to Credit Card or Credit Card enrollment ​
Change Payment Frequency ​
Dividend Withdrawal ​
Full Withdrawal or Cash Surrender ​
Fund Switch or Premium Redirection ​
Inclusion of Rider or Deletion of Rider ​
Increase Sum Assured or Increase in Premium​
Inquiry or Complaint​
Partial Withdrawal​
Pay Premium​
Re-instatement​
Top-up​
Update Mobile number or Email address ​
Update Residential or Correspondence Address​

Please remove : Track your submitted request , Request for statement

---------------------------------------
Change beneficial to Great news
Change payment frequency - to Great news
----------------------------------------
Change Method of Payment to Credit Card or Credit Card enrollment option 
Change Text - For credit card payments and auto-pay enrollment, please take advantage of the following convenient facilities:

------------------------------------
Pay premium option 
For credit card payments and auto-pay enrollment, please take advantage of the following convenient facilities:
------------------------------------
Reinstatement 

Field marked with * are required

<div style='font-family: Arial, sans-serif; line-height: 1.5;'>
  <p style='margin: 15px 0; line-height: 1.6; color: #5a6872;'>To request for Reinstatement, kindly attach the following:</p>
  
  <ul style='margin: 15px 0; padding-left: 20px; color: #5a6872;'>
    <li style='margin-bottom: 8px;'>
      Duly accomplished and signed <a href='https:/www.prulifeuk.com.ph/export/sites/prudential-ph/en/.galleries/pdf/2022_Reinstatement-form-for-individual-PO-FILLABLE-v2.pdf' style='color: #0066cc; text-decoration: underline;' target=_blank'>Reinstatement form for Individual Policyowner</a> by the Life Insured and the Policyowner
    </li>
    <li style='margin-bottom: 8px;'>
      Duly accomplished and signed <a href='https:/www.prulifeuk.com.ph/export/sites/prudential-ph/en/.galleries/pdf/2022_Reinstatement-form-for-Corporate-Entity-PO-FILLABLE-V2.pdf' style='color: #0066cc; text-decoration: underline;' target='_blank'>Reinstatement form for Corporate/Entity Policyowner</a> by the life Insured and the Policyowner
    </li>
    <li style='margin-bottom: 8px;'>
      Proof of payment of the reinstatement cost
      <ol style='margin-top: 5px; padding-left: 25px; color: #5a6872;'>
        <li style='margin-bottom: 5px;'>Call our contact center for the amount to be settled</li>
        <li style='margin-bottom: 5px;'>Pay through the available <a href='https://www.prulifeuk.com.ph/en/policy-services-information/premium-payment-facilities/' style='color: #0066cc; text-decoration: underline;' target='_blank'> payment channels </a> or <a href='https://www.prulifeuk.com.ph/en/payments/' style='color: #0066cc; text-decoration: underline;' target='_blank'>click here</a> to request a personalized secure card payment link sent to your registered email address.</li>
      </ol>
    </li>
    <li style='margin-bottom: 8px;'>
      Clear copy of valid (1) government-issued ID or (2) valid non-government IDs of policyowner/authorized representative/sole proprietor
    </li>
  </ul>
  
  <p style='margin: 15px 0; line-height: 1.6; color: #d74108; font-style: italic;'>Additional requirements may be requested after your submission is reviewed</p>
</div>

Attachment*
*.  Note: The maximum file size for each document is 5 MB. Acceptable doc type to be uploaded: png, jpeg, pdf, doc, docx, heic, jpg.

Attachment
  - Mandatory field
Error message: "Mandatory document
required. Please upload to proceed."
    - The maximum file size for each document is 5 MB.
Error message: "The uploaded file exceeds the maximum allowed size of 5 MB. Please upload a file that is 5 MB or smaller to proceed." 
  - Acceptable doc type to be uploaded: png, jpeg, pdf, doc, docx, .heic, .jpg 
Error message: "The uploaded file type is not supported. Please upload a file in acceptable formats to proceed.  
  - (D1) Upload Field Name:  Reinstatement form
Mandatory upload
  - (D2) Upload Field Name:  Clear copy of one (1) valid government-issued ID or two (2) valid non-government IDs of policyowner
Mandatory upload
  - (D3) Upload Field Name: Proof of payment for the reinstatement cost
Non-mandatory 
   -There will be 1 upload field for each mandatory requirement (based on the chosen transaction)
  - All the attachment will be stored on share point. User will approve the attachment on SharePoint and then the file will be transferred/ pushed to FileNet.


I can opt out anytime by sending an email to contact.us@prulifeuk.com.ph
https://www.prulifeuk.com.ph/en/privacy-policy/
----------------------------------------------
Increase Sum Assured or Increase in Premium

Field marked with * are required

<div style='font-family: Arial, sans-serif; line-height: 1.5;'>
  <p style='margin: 15px 0; line-height: 1.6; color: #5a6872;'>To request for Increase sum assured, Increase in premium, kindly attach the following:</p>
  
  <ul style='margin: 15px 0; padding-left: 20px; color: #5a6872;'>
    <li style='margin-bottom: 8px;'>
      Duly accomplished and signed <a href="#" style='color: #0066cc; text-decoration: underline; font-weight: bold;' target="_blank">Policy Amendment Request for Individual Policyowner</a> by the Life Insured and the Policyowner
    </li>
    <li style='margin-bottom: 8px;'>
      Duly accomplished and signed <a href="#" style='color: #0066cc; text-decoration: underline; font-weight: bold;' target="_blank">Policy Amendment Request for Corporate/Entity Policyowner</a> by the Life Insured and the Policyowner
    </li>
  </ul>
  
  <p style='margin: 15px 0; line-height: 1.6; color: #5a6872; font-style: italic;'>Additional requirements may be requested after your submission is reviewed</p>
</div>

Attachment*
*.  Note: The maximum file size for each document is 5 MB. Acceptable doc type to be uploaded: png, jpeg, pdf, doc, docx, heic, jpg.

I can opt out anytime by sending an email to contact.us@prulifeuk.com.ph
https://www.prulifeuk.com.ph/en/privacy-policy/
--------------------------------------------------


(function() {
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.dynamic-form-submission');
    
    if (!form) {
      return;
    }
    
    const submitUrl = form.getAttribute('data-url-submit');
    const redirectUrl = form.getAttribute('data-url-redirect');
    
    if (!submitUrl) {
      return;
    }
    
    const progressContainer = document.querySelector('.loader') || createProgressElement();
    const notificationElement = document.querySelector('[data-notification]') || createNotificationElement();
    
    const recaptchaElement = form.querySelector('.g-recaptcha[data-recaptcha]');
    const isRecaptchaEnabled = !!recaptchaElement;
    
    function verifyRecaptcha() {
      if (!isRecaptchaEnabled) {
        return true;
      }
      
      const recaptchaResponse = grecaptcha && grecaptcha.getResponse();
      
      if (!recaptchaResponse || recaptchaResponse.length === 0) {
        showNotification('Please complete the reCAPTCHA verification.', true);
        return false;
      }
      
      return true;
    }
    
    function validateFiles() {
      const fileInputs = form.querySelectorAll('input[type="file"]');
      let totalSize = 0;
      let isValid = true;
      let errorMessage = '';
      
      // Check each file input
      for (let i = 0; i < fileInputs.length; i++) {
        const input = fileInputs[i];
        const isRequired = input.hasAttribute('required');
        const files = input.files;
        
        // Check if required file input is empty
        if (isRequired && (!files || files.length === 0)) {
          isValid = false;
          const placeholder = input.getAttribute('placeholder') || 'File';
          errorMessage = `Please select a file for ${placeholder}.`;
          break;
        }
        
        // Check file size limits
        if (files && files.length > 0) {
          for (let j = 0; j < files.length; j++) {
            const file = files[j];
            const fileSizeMB = file.size / (1024 * 1024);
            totalSize += file.size;
            
            // Check individual file size (5MB limit)
            if (fileSizeMB > 5) {
              isValid = false;
              errorMessage = `File ${file.name} exceeds the maximum size of 5MB.`;
              break;
            }
          }
          
          if (!isValid) break;
        }
      }
      
      // Check total file size (20MB limit)
      const totalSizeMB = totalSize / (1024 * 1024);
      if (isValid && totalSizeMB > 20) {
        isValid = false;
        errorMessage = `Total file size exceeds the maximum of 20MB. Current total: ${totalSizeMB.toFixed(2)}MB.`;
      }
      
      if (!isValid) {
        showNotification(errorMessage, true);
      }
      
      return isValid;
    }
    
    function handleFormSubmit(event) {
      event.preventDefault();
      
      hideNotification();
      
      // Verify reCAPTCHA first
      if (!verifyRecaptcha()) {
        return;
      }
      
      // Validate files
      if (!validateFiles()) {
        return;
      }
      
      try {
        form.setAttribute('enctype', 'multipart/form-data');
        
        const formData = new FormData(form);
        
        showProgress();
        
        const xhr = new XMLHttpRequest();
        
        xhr.upload.addEventListener('progress', function(e) {
          // Progress tracking if needed
        });
        
        xhr.addEventListener('load', function() {
          hideProgress();
          
          if (xhr.status >= 200 && xhr.status < 300) {
            try {
              const response = JSON.parse(xhr.responseText.trim());
              
              if (response.statusCode === 200) {
                if (redirectUrl) {
                  window.location.href = redirectUrl;
                } else {
                  showNotification('Form submitted successfully!', false);
                }
              } else {
                showNotification(response.message || 'An error occurred during form submission.', true);
              }
            } catch (e) {
              showNotification('An unexpected error occurred. Please try again.', true);
            }
          } else {
            showNotification(`Server error: ${xhr.status} ${xhr.statusText}`, true);
          }
        });
        
        xhr.addEventListener('error', function(e) {
          hideProgress();
          showNotification('Network error. Please check your connection and try again.', true);
        });
        
        xhr.addEventListener('abort', function() {
          hideProgress();
          showNotification('Form submission was aborted.', true);
        });
        
        xhr.open('POST', submitUrl, true);
        xhr.send(formData);
      } catch (error) {
        hideProgress();
        showNotification('An error occurred while preparing the form data. Please try again.', true);
      }
    }
    
    function showProgress() {
      progressContainer.classList.remove('--hide');
    }
    
    function hideProgress() {
      progressContainer.classList.add('--hide');
    }
    
    function showNotification(message, isError = true) {
      const messageElement = notificationElement.querySelector('[data-notification-message]');
      if (messageElement) {
        messageElement.textContent = message;
      }
      
      notificationElement.classList.remove('d-none');
      
      if (isError) {
        notificationElement.classList.add('error');
      } else {
        notificationElement.classList.remove('error');
      }
      
      notificationElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
    
    function hideNotification() {
      notificationElement.classList.add('d-none');
    }
    
    function createProgressElement() {
      const element = document.createElement('div');
      element.className = 'loader --hide';
      element.innerHTML = `
        <div class="loader-wrapper">
          <div class="loader-wrapper-item">
            <div class="loader-item"></div>
            <div class="loader-item loader-item-2"></div>
            <div class="loader-item loader-item-3"></div>
            <div class="loader-item loader-item-4"></div>
            <div class="loader-item loader-item-5"></div>
            <div class="loader-item loader-item-6"></div>
            <div class="loader-item loader-item-7"></div>
            <div class="loader-item loader-item-8"></div>
            <div class="loader-item loader-item-9"></div>
            <div class="loader-item loader-item-10"></div>
            <div class="loader-item loader-item-11"></div>
            <div class="loader-item loader-item-12"></div>
          </div>
        </div>
      `;
      form.parentNode.appendChild(element);
      return element;
    }
    
    function createNotificationElement() {
      const element = document.createElement('div');
      element.className = 'notification-form d-none';
      element.setAttribute('data-notification', '');
      
      element.innerHTML = `
        <span class="icon icon-warning-triangle notification-form__icon"></span>
        <div class="notification-form__content">
          <div class="notification-form__title">Error</div>
          <div class="notification-form__desc" data-notification-message></div>
        </div>
      `;
      
      form.insertBefore(element, form.firstChild);
      return element;
    }
    
    form.setAttribute('enctype', 'multipart/form-data');
    
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'enctype') {
          if (form.getAttribute('enctype') !== 'multipart/form-data') {
            form.setAttribute('enctype', 'multipart/form-data');
          }
        }
      });
    });
    
    observer.observe(form, { attributes: true });
    
    form.addEventListener('submit', handleFormSubmit);
    
    if (window.$ && $.ajax) {
      const originalAjaxSubmit = $.ajax;
      $.ajax = function(options) {
        if (options && options.url === submitUrl) {
          if (options.data instanceof FormData) {
            if (!verifyRecaptcha() || !validateFiles()) {
              if (options.error && typeof options.error === 'function') {
                options.error(null, 'error', 'Validation failed');
              }
              return {
                abort: function() {},
                fail: function() { return this; },
                always: function() { return this; }
              };
            }
          }
        }
        return originalAjaxSubmit.apply(this, arguments);
      };
    }
    
    const existingSubmitHandler = form.onsubmit;
    if (existingSubmitHandler) {
      form.onsubmit = function(event) {
        event.preventDefault();
        
        if (!verifyRecaptcha() || !validateFiles()) {
          return false;
        }
        
        return existingSubmitHandler.call(this, event);
      };
    }
  });
})();
