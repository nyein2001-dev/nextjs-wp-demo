<%@ include file="log-utils.jsp" %>


<%@ page import="java.io.*,
                 java.util.*,
                 java.text.SimpleDateFormat,
                 org.opencms.main.OpenCms,
                 org.opencms.file.*,
                 org.opencms.main.CmsLog,
                 org.apache.commons.logging.Log" %>

<%!
/**
 * LogUtils - A utility class for logging in OpenCms pre-Java 7 environments
 * Saves logs to /system/modules/com.prudential.v2.ph/resources/csv-logs/
 */
public static class LogUtils {
    // Log types
    public static final String LOG_TYPE_INFO = "INFO";
    public static final String LOG_TYPE_ERROR = "ERROR";
    
    // OpenCms logger for console output
    private static final Log LOG = CmsLog.getLog(LogUtils.class);
    
    // Base directory for CSV logs
    private static final String LOG_DIRECTORY = "/system/modules/com.prudential.v2.ph/resources/csv-logs/";
    
    /**
     * Logs a message to both OpenCms log and CSV file
     * @param cmsObject The CmsObject for file operations
     * @param logType The type of log (INFO or ERROR)
     * @param action The action being performed
     * @param message The log message
     * @param additionalData Optional additional data to log
     */
    public static void log(CmsObject cmsObject, String logType, String action, String message, String additionalData) {
        try {
            // Format timestamp for log entry
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String timestamp = dateFormat.format(new Date());
            
            // Format timestamp for filename
            SimpleDateFormat filenameDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String dateStr = filenameDateFormat.format(new Date());
            
            // Create log entry
            StringBuilder logEntry = new StringBuilder();
            logEntry.append(timestamp).append(",");
            logEntry.append(escapeCSV(logType)).append(",");
            logEntry.append(escapeCSV(action)).append(",");
            logEntry.append(escapeCSV(message)).append(",");
            logEntry.append(escapeCSV(additionalData)).append("\n");
            
            // Log to OpenCms log
            if (LOG_TYPE_ERROR.equals(logType)) {
                LOG.error(action + ": " + message + (additionalData != null ? " - " + additionalData : ""));
            } else {
                LOG.info(action + ": " + message + (additionalData != null ? " - " + additionalData : ""));
            }
            
            // Ensure log directory exists
            String logFilePath = LOG_DIRECTORY + logType.toLowerCase() + "_" + dateStr + ".csv";
            ensureDirectoryExists(cmsObject, LOG_DIRECTORY);
            
            // Check if file exists, create with headers if not
            boolean fileExists = fileExists(cmsObject, logFilePath);
            
            // Write to log file
            if (!fileExists) {
                // Create new file with headers
                String headers = "Timestamp,Type,Action,Message,AdditionalData\n";
                writeToFile(cmsObject, logFilePath, headers + logEntry.toString(), false);
            } else {
                // Append to existing file
                appendToFile(cmsObject, logFilePath, logEntry.toString());
            }
        } catch (Exception e) {
            // Fallback to console logging if file logging fails
            LOG.error("Failed to write to log file: " + e.getMessage(), e);
        }
    }
    
    /**
     * Logs an INFO message
     */
    public static void logInfo(CmsObject cmsObject, String action, String message) {
        log(cmsObject, LOG_TYPE_INFO, action, message, null);
    }
    
    /**
     * Logs an INFO message with additional data
     */
    public static void logInfo(CmsObject cmsObject, String action, String message, String additionalData) {
        log(cmsObject, LOG_TYPE_INFO, action, message, additionalData);
    }
    
    /**
     * Logs an ERROR message
     */
    public static void logError(CmsObject cmsObject, String action, String message) {
        log(cmsObject, LOG_TYPE_ERROR, action, message, null);
    }
    
    /**
     * Logs an ERROR message with additional data
     */
    public static void logError(CmsObject cmsObject, String action, String message, String additionalData) {
        log(cmsObject, LOG_TYPE_ERROR, action, message, additionalData);
    }
    
    /**
     * Logs an ERROR message with exception details
     */
    public static void logError(CmsObject cmsObject, String action, String message, Throwable t) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        t.printStackTrace(pw);
        log(cmsObject, LOG_TYPE_ERROR, action, message, sw.toString());
    }
    
    /**
     * Escapes a string for CSV format
     */
    private static String escapeCSV(String value) {
        if (value == null) {
            return "";
        }
        
        // Replace quotes with double quotes and wrap in quotes if needed
        boolean needsQuoting = value.contains("\"") || value.contains(",") || value.contains("\n");
        if (needsQuoting) {
            return "\"" + value.replace("\"", "\"\"") + "\"";
        }
        return value;
    }
    
    /**
     * Checks if a file exists in OpenCms
     */
    private static boolean fileExists(CmsObject cmsObject, String filePath) {
        try {
            cmsObject.readResource(filePath);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    
    /**
     * Ensures a directory exists in OpenCms
     */
    private static void ensureDirectoryExists(CmsObject cmsObject, String dirPath) throws Exception {
        if (!dirPath.endsWith("/")) {
            dirPath += "/";
        }
        
        try {
            cmsObject.readFolder(dirPath);
        } catch (Exception e) {
            // Directory doesn't exist, create it
            String parentPath = dirPath.substring(0, dirPath.lastIndexOf('/', dirPath.length() - 2) + 1);
            ensureDirectoryExists(cmsObject, parentPath);
            
            String folderName = dirPath.substring(parentPath.length(), dirPath.length() - 1);
            cmsObject.createResource(parentPath + folderName, 
                                    OpenCms.getResourceManager().getResourceType("folder").getTypeId());
        }
    }
    
    /**
     * Writes content to a file in OpenCms
     */
    private static void writeToFile(CmsObject cmsObject, String filePath, String content, boolean append) throws Exception {
        try {
            // Check if file exists
            CmsResource resource = null;
            try {
                resource = cmsObject.readResource(filePath);
            } catch (Exception e) {
                // File doesn't exist, create it
                int fileType = OpenCms.getResourceManager().getResourceType("plain").getTypeId();
                resource = cmsObject.createResource(filePath, fileType);
            }
            
            // Get file content
            CmsFile file = cmsObject.readFile(resource);
            byte[] oldContent = file.getContents();
            byte[] newContent;
            
            if (append && oldContent.length > 0) {
                // Append to existing content
                String existingContent = new String(oldContent, "UTF-8");
                newContent = (existingContent + content).getBytes("UTF-8");
            } else {
                // Write new content
                newContent = content.getBytes("UTF-8");
            }
            
            // Update file content
            file.setContents(newContent);
            cmsObject.writeFile(file);
        } catch (Exception e) {
            throw new Exception("Failed to write to file: " + filePath, e);
        }
    }
    
    /**
     * Appends content to a file in OpenCms
     */
    private static void appendToFile(CmsObject cmsObject, String filePath, String content) throws Exception {
        writeToFile(cmsObject, filePath, content, true);
    }
}


    <%@ page session="false" contentType="text/html;charset=UTF-8" %>
<%@ page import="java.sql.*,
                 java.io.*,
                 java.net.*,
                 javax.net.*,
                 org.json.JSONObject,
                 org.opencms.main.OpenCms,
                 org.apache.commons.logging.Log,
                 org.opencms.main.CmsLog,
                 org.apache.commons.lang.StringUtils,
                 java.util.*,
                 org.opencms.jsp.util.*,
                 java.io.IOException,
                 java.text.*,
                 org.apache.commons.fileupload.FileItem,
                 org.apache.commons.fileupload.*,
                 org.apache.commons.fileupload.disk.*,
                 org.apache.commons.fileupload.servlet.*" %>
<%@ page import="org.opencms.mail.CmsHtmlMail"%>
<%@page import="java.util.Locale" %>
<%@page import="org.opencms.jsp.CmsJspActionElement"%>
<%@ page import="org.apache.commons.io.FilenameUtils" %>
<%@ page import="org.apache.commons.mail.EmailAttachment" %>
<%@ taglib prefix="cms" uri="http://www.opencms.org/taglib/cms"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
<%@page import="javax.xml.bind.DatatypeConverter"%>
<%@page import="org.opencms.jsp.*, org.opencms.file.*, org.opencms.flex.*,org.opencms.util.*, java.util.*" %>
<c:set var="locale" value="${cms.locale}" />
<fmt:setLocale value="${param.language}" />

<%
//paramSelectTopic
String paramSelectTopic = StringUtils.isEmpty(request.getParameter("selectTopic")) ? "" : request.getParameter("selectTopic");
String[] paramSelectTopics = paramSelectTopic.split("&&");


String paramSelectTopic2 = StringUtils.isEmpty(request.getParameter("selectTopic2")) ? "" : request.getParameter("selectTopic2");
String[] paramSelectTopics2 = paramSelectTopic2.split("&&");
%>

<cms:bundle basename="com.prudential.v2.ph.default">
  <c:set var="productTitle"><fmt:message key="key.default.have.productTitle" /></c:set>
  <c:set var="noProductTitle"><fmt:message key="key.default.none.productTitle" /></c:set>
  <c:set var="adminMailSubject"><fmt:message key="key.default.admin.mail.subject" /></c:set>
  <c:set var="paramSelectTopics"><%=paramSelectTopics[0]%></c:set>
  <c:set var="emailEnquiry" value=""/>
  <c:if test="${not empty paramSelectTopics}">
  	<c:set var="emailEnquiry"><fmt:message key="key.mail.selected.enquiry.${paramSelectTopics}" /></c:set>
  </c:if>
</cms:bundle>
<%!
	public String A1filter(String input){
	    String tem = input;
	    tem = tem.replaceAll("<", "&lt;");
	    tem = tem.replaceAll(">", "&gt;");
	    tem = tem.replaceAll("&", "&amp;");
	    tem = tem.replaceAll("\"", "&quot;");
	    tem = tem.replaceAll(" ", "&nbsp;");
	    tem = tem.replaceAll("'", "&#39;");
	    return tem;
	}
    public String A1filterHidden(String input,String temp){
	    String tem = temp;
	    String tmpinput = "content:'" + input + "'; mso-hide:all;display:none;";
	    tem = tem.replaceAll(tmpinput, "");
	    return tem;
    }
    public  String A1filter(String input,String value,String temp){
        String tem = temp;
        tem = tem.replaceAll(input, value);
        return tem;
    }
    public String A1filterNoProductTitle(String productTitleName,String temp,String noProductTitle){
        String tem = temp;
        tem = tem.replaceAll(productTitleName, noProductTitle);
        return tem;
    }
    public String responeObject(int statusCode,String message) {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        sb.append("\"statusCode\":").append(statusCode).append(",");
        sb.append("\"message\":\"").append(message).append("\"");
        sb.append("}");
        return sb.toString();
    }
	
    /**
     * Creates a temporary file from an input stream
     * Compatible with pre-Java 7 environments
     */
    public static File createTempFileFromInputStream(InputStream inputStream, String prefix, String suffix) throws IOException {
        File tempFile = File.createTempFile(prefix, suffix);
        tempFile.deleteOnExit(); // Ensure temp file is deleted when JVM exits
        
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(tempFile);
            byte[] buffer = new byte[8192]; // Larger buffer for better performance
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                out.write(buffer, 0, bytesRead);
            }
            out.flush();
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    System.out.println("Error closing output stream: " + e.getMessage());
                }
            }
        }
        return tempFile;
    }

    /**
     * Send email with attachments
     * Compatible with OpenCms 9.5.1 and pre-Java 7 environments
     */
    public static void sendEmail(CmsObject cmsObject, String from, String to, String subject, String message, Map<String, List<FileItem>> fieldFilesMap) throws Exception {
        // Log the email sending attempt
        LogUtils.logInfo(cmsObject, "EMAIL_SEND", "Sending email from: " + from + " to: " + to, "Subject: " + subject);
        
        try {
            CmsHtmlMail email = new CmsHtmlMail();
            email.setFrom(from);
            email.addTo(to);
            email.setSubject(subject);
            email.setHtmlMsg(message); // Use HTML format to preserve formatting
            email.setCharset("UTF-8");

            // Handle file attachments if any exist
            if (fieldFilesMap != null && !fieldFilesMap.isEmpty()) {
                LogUtils.logInfo(cmsObject, "EMAIL_ATTACHMENTS", "Processing " + fieldFilesMap.size() + " file fields for attachment");
                
                List<File> tempFiles = new ArrayList<File>(); // Track temp files for cleanup
                int totalAttachments = 0;
                
                // Process each field that contains files
                for (Map.Entry<String, List<FileItem>> entry : fieldFilesMap.entrySet()) {
                    String fieldName = entry.getKey();
                    List<FileItem> fileItems = entry.getValue();
                    
                    LogUtils.logInfo(cmsObject, "EMAIL_ATTACHMENTS", "Processing field: " + fieldName, "Files: " + fileItems.size());
                    
                    // Process each file within the field
                    for (int i = 0; i < fileItems.size(); i++) {
                        FileItem fileItem = fileItems.get(i);
                        
                        // Skip if not a file or if file is empty
                        if (fileItem.isFormField() || fileItem.getSize() <= 0) {
                            LogUtils.logInfo(cmsObject, "EMAIL_ATTACHMENTS", "Skipping empty or non-file item", "Field: " + fieldName);
                            continue;
                        }
                        
                        String fileName = fileItem.getName();
                        if (fileName == null || fileName.trim().isEmpty()) {
                            LogUtils.logInfo(cmsObject, "EMAIL_ATTACHMENTS", "Skipping file with no name", "Field: " + fieldName);
                            continue;
                        }
                        
                        // Extract filename without path information
                        fileName = new File(fileName).getName();
                        LogUtils.logInfo(cmsObject, "EMAIL_ATTACHMENTS", "Processing file: " + fileName, "Size: " + fileItem.getSize() + " bytes");
                        
                        // Get file extension
                        String extension = "";
                        int dotIndex = fileName.lastIndexOf('.');
                        if (dotIndex > 0) {
                            extension = fileName.substring(dotIndex);
                        }
                        
                        try {
                            // Create temp file from uploaded content
                            File tempFile = createTempFileFromInputStream(
                                fileItem.getInputStream(), 
                                "attachment_" + i + "_", 
                                extension
                            );
                            tempFiles.add(tempFile); // Track for cleanup
                            
                            // Create and configure the attachment
                            EmailAttachment attachment = new EmailAttachment();
                            attachment.setPath(tempFile.getAbsolutePath());
                            attachment.setName(fileName); // Use original filename
                            attachment.setDisposition(EmailAttachment.ATTACHMENT);
                            
                            // Add to email
                            email.attach(attachment);
                            totalAttachments++;
                            LogUtils.logInfo(cmsObject, "EMAIL_ATTACHMENTS", "Successfully attached: " + fileName);
                        } catch (Exception e) {
                            LogUtils.logError(cmsObject, "EMAIL_ATTACHMENTS", "Error processing attachment: " + fileName, e);
                        }
                    }
                }
                
                // Send the email with attachments
                try {
                    email.send();
                    LogUtils.logInfo(cmsObject, "EMAIL_SEND", "Email with " + totalAttachments + " attachments sent successfully", "To: " + to);
                } finally {
                    // Clean up temp files - not strictly necessary with deleteOnExit
                    // but good practice for long-running servers
                    for (File file : tempFiles) {
                        try {
                            if (file.exists()) {
                                file.delete();
                            }
                        } catch (Exception e) {
                            LogUtils.logError(cmsObject, "EMAIL_CLEANUP", "Failed to delete temp file: " + file.getAbsolutePath(), e);
                        }
                    }
                }
            } else {
                // No attachments, send simple email
                email.send();
                LogUtils.logInfo(cmsObject, "EMAIL_SEND", "Email sent successfully (no attachments)", "To: " + to);
            }
        } catch (Exception e) {
            LogUtils.logError(cmsObject, "EMAIL_SEND", "Failed to send email to: " + to, e);
            throw e; // Re-throw to allow caller to handle
        }
    }
%>
<%
        CmsJspActionElement cms = new CmsJspActionElement(pageContext, request, response);
        CmsObject cmsObject = cms.getCmsObject();
        Locale locale = cms.getRequestContext().getLocale(); 
        String productTitleParam = pageContext.getAttribute("productTitle").toString();
        String noProductTitleParam = pageContext.getAttribute("noProductTitle").toString();
        
        // Log the start of form processing
        LogUtils.logInfo(cmsObject, "FORM_PROCESS", "Starting form processing", "Remote IP: " + request.getRemoteAddr());
        
        try {
            // get file xml content
            String pathFile = request.getParameter("file-path");
            byte[] valueDecoded = DatatypeConverter.parseBase64Binary(pathFile);
            String pathFileXml = new String(valueDecoded, "UTF-8");
            CmsResource contentRs = cmsObject.readResource(pathFileXml);
            CmsJspContentAccessBean componentPros = new CmsJspContentAccessBean(cmsObject, locale, contentRs);
            
            LogUtils.logInfo(cmsObject, "FORM_CONFIG", "Form configuration loaded", "Path: " + pathFileXml);
            
            // get option send mail 
            String SendEmail = componentPros.getValue().get("EmailAndDB").getValue().get("SendEmail").getStringValue();
            Boolean isSendEmail = Boolean.valueOf(SendEmail);
            
            // get content tempalate mail admin
            String templateContentAdmin = componentPros.getValue().get("EmailAndDB").getValue().get("EmailContentAdmins").getStringValue();
            CmsResource resource = cmsObject.readResource(templateContentAdmin);
            CmsFile file = cmsObject.readFile(resource);
            byte[] contentAdmin = file.getContents();
            Map<String, List<FileItem>> fieldFilesMap = new HashMap<String, List<FileItem>>();

            String mailContent = new String(contentAdmin);	
            
            // get content tempalate mail user
            String templateContentUser = componentPros.getValue().get("EmailAndDB").getValue().get("EmailContentEndUser").getStringValue();
            CmsResource resourceUser = cmsObject.readResource(templateContentUser);
            CmsFile fileUser = cmsObject.readFile(resourceUser);
            byte[] contentUser = fileUser.getContents();
            String mailContentUser = new String(contentUser);
            
            LogUtils.logInfo(cmsObject, "EMAIL_TEMPLATES", "Email templates loaded", 
                            "Admin template: " + templateContentAdmin + ", User template: " + templateContentUser);
            
            // mail admin in dialog
            String emailAddressAdmin = componentPros.getValue().get("EmailAndDB").getValue().get("EmailAddress").getStringValue();
            // mail user in xml file
            String emailAddressUser  =  "";
            // mail subject
            String topic = StringUtils.isEmpty(paramSelectTopic) ? "" : paramSelectTopics[1];
            String topic2 = StringUtils.isEmpty(paramSelectTopic2) ? "" : paramSelectTopics2[1];
            String adminMailSubject = pageContext.getAttribute("adminMailSubject").toString();
            adminMailSubject = adminMailSubject.replace("#Topic#", topic);
            String mailSubject = componentPros.getValue().get("EmailAndDB").getValue().get("EmailSubject").getStringValue();
            mailSubject = mailSubject.replace("#Topic#", topic);

            String adminMailSubject2 = componentPros.getValue().get("EmailAndDB").getValue().get("AdminEmailSubject").getStringValue();
            if(!StringUtils.isEmpty(adminMailSubject2))
            {		
                adminMailSubject2 = adminMailSubject2.replace("#Topic#", topic);
                adminMailSubject = adminMailSubject2;
            }
            
            LogUtils.logInfo(cmsObject, "EMAIL_CONFIG", "Email configuration prepared", 
                            "Admin email: " + emailAddressAdmin + ", Topic: " + topic);
            
            // messge send mail fails
            String errMesageSendMailFails = componentPros.getValue().get("GeneralForm").getValue().get("GenericErrorMessage").getStringValue();
            // Section Title 1
            String section1 = componentPros.getValue().get("Section1").getValue().get("SectionTitle").getStringValue();
            if(!StringUtils.isEmpty(section1)){
                String temp = "%class" + "Section1" + "%";
                mailContent = A1filterHidden(temp, mailContent);
                mailContentUser = A1filterHidden(temp, mailContentUser);
            }
            // Section Label 2
            String section2 = componentPros.getValue().get("Section2").getValue().get("SectionLabel").getStringValue();
            if(!StringUtils.isEmpty(section2)){
                String temp = "%class" + "Section2" + "%";
                mailContent = A1filterHidden(temp, mailContent);
                mailContentUser = A1filterHidden(temp, mailContentUser);
            }
            // Section Label 3
            String section3 = componentPros.getValue().get("Section3").getValue().get("SectionLabel").getStringValue();
            if(!StringUtils.isEmpty(section3)){
                String temp = "%class" + "Section3" + "%";
                mailContent = A1filterHidden(temp, mailContent);
                mailContentUser = A1filterHidden(temp, mailContentUser);
            }
            // Section Label 5
            String section5 = componentPros.getValue().get("Section5").getValue().get("SectionLabel").getStringValue();
            if(!StringUtils.isEmpty(section5)){
                String temp = "%class" + "Section5" + "%";
                mailContent = A1filterHidden(temp, mailContent);
                mailContentUser = A1filterHidden(temp, mailContentUser);
            } 
            
            if(isSendEmail){
                LogUtils.logInfo(cmsObject, "EMAIL_PROCESS", "Email sending is enabled, processing form data");
                
                try{
                    // Process form fields first
                    Enumeration<?> enumeration = request.getParameterNames();
                    String firstName = "";
                    String lastName = "";
                    String policy_number = "";
                    String marketingConsent = "";
                    
                    StringBuilder formDataLog = new StringBuilder();
                    formDataLog.append("Form fields: ");
                    
                    while(enumeration.hasMoreElements()){
                        String parameterName = enumeration.nextElement().toString();
                        String value = "";
                        if(parameterName.equals("selectTopic")){
                          value = topic;
                        }else{
                            value = A1filter(request.getParameter(parameterName));
                        }
                        if(parameterName.equals("selectTopic2")){
                          value = topic2;
                        }
                        
                        // Log form field (but truncate very long values)
                        String logValue = value;
                        if (logValue != null && logValue.length() > 100) {
                            logValue = logValue.substring(0, 97) + "...";
                        }
                        formDataLog.append(parameterName).append("=").append(logValue).append(", ");
                        
                        if(!StringUtils.isEmpty(value)) {
                            String temp = "%class" + parameterName + "%";
                            mailContent = A1filterHidden(temp, mailContent);
                            mailContentUser = A1filterHidden(temp, mailContentUser);
                            mailContent = A1filter("%" + parameterName + "%", value, mailContent);
                            mailContentUser = A1filter("%" + parameterName + "%", value, mailContentUser);
                        }
                        // get first name
                        if("first-name".equals(parameterName)){
                            firstName = value;
                        }
                        // get last name
                        if("last-name".equals(parameterName)){
                            lastName = value;
                        }
                        // mail user in form
                        if("email-address".equals(parameterName)) {
                           emailAddressUser = value;
                        }
                        // product title
                        if("product-title".equals(parameterName)) {
                           String nameTitle = "%key-" + parameterName + "%";
                           if(StringUtils.isEmpty(value)) {
                               mailContent =  A1filterNoProductTitle(nameTitle,mailContent,noProductTitleParam);
                               mailContentUser =  A1filterNoProductTitle(nameTitle,mailContentUser,noProductTitleParam);
                           } else {
                               String productTitle = productTitleParam + " " + value;
                               mailContent = A1filter(nameTitle,productTitle,mailContent);
                               mailContentUser = A1filter(nameTitle,productTitle,mailContentUser);
                           }
                        }
                        
                        if("policy-number".equals(parameterName)) {
                           policy_number = value;
                        }
                        if("marketingConsent".equals(parameterName)) {
                           marketingConsent = "Yes";
                        }
                    }
                    
                    LogUtils.logInfo(cmsObject, "FORM_DATA", formDataLog.toString());
                    
                    // Process file uploads if this is a multipart request
                    if (ServletFileUpload.isMultipartContent(request)) {
                        LogUtils.logInfo(cmsObject, "FILE_UPLOAD", "Processing multipart form data for file attachments");
                        
                        // Configure file upload settings
                        DiskFileItemFactory factory = new DiskFileItemFactory();
                        // Set factory constraints
                        factory.setSizeThreshold(4096); // 4KB
                        File tempDir = new File(System.getProperty("java.io.tmpdir"));
                        factory.setRepository(tempDir);
                        
                        // Create a new file upload handler
                        ServletFileUpload upload = new ServletFileUpload(factory);
                        
                        try {
                            // Parse the request
                            List<FileItem> items = upload.parseRequest(request);
                            
                            LogUtils.logInfo(cmsObject, "FILE_UPLOAD", "Found " + items.size() + " items in multipart request");
                            
                            // Process the uploaded items
                            for (FileItem item : items) {
                                if (!item.isFormField()) {
                                    String fieldName = item.getFieldName();
                                    String fileName = item.getName();
                                    
                                    // Only process if we have a valid file
                                    if (fileName != null && !fileName.isEmpty() && item.getSize() > 0) {
                                        LogUtils.logInfo(cmsObject, "FILE_UPLOAD", "Found file upload: " + fieldName, 
                                                      "Filename: " + fileName + ", Size: " + item.getSize() + " bytes");
                                        
                                        // Store in our map for later attachment
                                        if (!fieldFilesMap.containsKey(fieldName)) {
                                            fieldFilesMap.put(fieldName, new ArrayList<FileItem>());
                                        }
                                        fieldFilesMap.get(fieldName).add(item);
                                    }
                                } else {
                                    // Process form fields from multipart data
                                    // This is for cases where the form is multipart but we still need the form fields
                                    String fieldName = item.getFieldName();
                                    String value = item.getString("UTF-8");
                                    
                                    // Only process if not already handled above and not empty
                                    if (!request.getParameterMap().containsKey(fieldName) && !StringUtils.isEmpty(value)) {
                                        value = A1filter(value);
                                        
                                        LogUtils.logInfo(cmsObject, "FORM_DATA", "Processing multipart form field: " + fieldName, 
                                                      "Value: " + (value.length() > 100 ? value.substring(0, 97) + "..." : value));
                                        
                                        if(fieldName.equals("selectTopic")){
                                            value = topic;
                                        }
                                        if(fieldName.equals("selectTopic2")){
                                            value = topic2;
                                        }
                                        
                                        String temp = "%class" + fieldName + "%";
                                        mailContent = A1filterHidden(temp, mailContent);
                                        mailContentUser = A1filterHidden(temp, mailContentUser);
                                        mailContent = A1filter("%" + fieldName + "%", value, mailContent);
                                        mailContentUser = A1filter("%" + fieldName + "%", value, mailContentUser);
                                        
                                        // Handle specific fields
                                        if("first-name".equals(fieldName)) {
                                            firstName = value;
                                        }
                                        if("last-name".equals(fieldName)) {
                                            lastName = value;
                                        }
                                        if("email-address".equals(fieldName)) {
                                            emailAddressUser = value;
                                        }
                                        if("policy-number".equals(fieldName)) {
                                            policy_number = value;
                                        }
                                        if("marketingConsent".equals(fieldName)) {
                                            marketingConsent = "Yes";
                                        }
                                    }
                                }
                            }
                            
                            LogUtils.logInfo(cmsObject, "FILE_UPLOAD", "Processed " + fieldFilesMap.size() + " file fields");
                            
                        } catch (Exception e) {
                            LogUtils.logError(cmsObject, "FILE_UPLOAD", "Error processing file uploads", e);
                        }
                    }
                    
                    // Handle marketing consent default value
                    if(StringUtils.isEmpty(marketingConsent)) {
                        mailContent = mailContent.replace("%marketingConsent2%", "No");
                        mailContentUser = mailContentUser.replace("%marketingConsent2%", "No");
                    } else {
                        mailContent = mailContent.replace("%marketingConsent2%", "Yes");
                        mailContentUser = mailContentUser.replace("%marketingConsent2%", "Yes");				
                    }
                    
                    // Handle policy number default value
                    if(StringUtils.isEmpty(policy_number)) {
                        mailContent = mailContent.replace("%policy-number%", "-");
                        mailContentUser = mailContentUser.replace("%policy-number%", "-");
                    }
                    
                    // Format full name
                    String fullName = firstName + " " + lastName;
                    if(!StringUtils.isEmpty(fullName.trim())){
                        String temp = "%class" + "fullName" + "%";
                        mailContent = A1filterHidden(temp, mailContent);
                        mailContentUser = A1filterHidden(temp, mailContentUser);
                        mailContent = A1filter("%" + "fullName" + "%", fullName, mailContent);
                        mailContentUser = A1filter("%" + "fullName" + "%", fullName, mailContentUser);
                    }
                    
                    // Get admin email addresses
                    List<String> emailAddressAdmins = new ArrayList<String>();
                    String emailEnquiry = pageContext.getAttribute("emailEnquiry").toString();
                    if(!StringUtils.isEmpty(emailEnquiry) && !StringUtils.isEmpty(paramSelectTopic)){
                      emailAddressAdmins = Arrays.asList(emailEnquiry.split(","));
                    }else{
                      emailAddressAdmins = Arrays.asList(emailAddressAdmin.split(","));
                    }
                    
                    LogUtils.logInfo(cmsObject, "EMAIL_RECIPIENTS", "Admin recipients determined", 
                                  "Count: " + emailAddressAdmins.size() + ", Addresses: " + emailAddressAdmins);
                    
                    // Add attachment information to email body if files were uploaded
                    if (!fieldFilesMap.isEmpty()) {
                        StringBuilder attachmentInfo = new StringBuilder();
                        attachmentInfo.append("<p><strong>Attachments:</strong></p><ul>");
                        
                        for (Map.Entry<String, List<FileItem>> entry : fieldFilesMap.entrySet()) {
                            List<FileItem> fileItems = entry.getValue();
                            for (FileItem item : fileItems) {
                                if (item.getName() != null && !item.getName().isEmpty()) {
                                    String fileName = new File(item.getName()).getName();
                                    attachmentInfo.append("<li>").append(fileName).append(" (").append(item.getSize()).append(" bytes)</li>");
                                }
                            }
                        }
                        attachmentInfo.append("</ul>");
                        
                        // Add the attachment information to both emails
                        mailContent = mailContent + attachmentInfo.toString();
                        // Optional: Add to user email as well
                        mailContentUser = mailContentUser + attachmentInfo.toString();
                    }
                    
                    // Send email to user if we have their address
                    if(!StringUtils.isEmpty(emailAddressUser)){
                        try {
                            sendEmail(
                                cmsObject,
                                (String) emailAddressAdmins.get(0),
                                emailAddressUser,
                                mailSubject,
                                mailContentUser,
                                fieldFilesMap
                            );
                            LogUtils.logInfo(cmsObject, "EMAIL_USER", "Email sent to user", "Address: " + emailAddressUser);
                        } catch (Exception e) {
                            LogUtils.logError(cmsObject, "EMAIL_USER", "Failed to send email to user: " + emailAddressUser, e);
                        }
                    }
                    
                    // Send emails to admins
                    boolean allAdminEmailsSucceeded = true;
                    for (String emailAdmin : emailAddressAdmins) {
                        try {
                            sendEmail(
                                cmsObject,
                                emailAddressUser,
                                emailAdmin,
                                adminMailSubject,
                                mailContent,
                                fieldFilesMap
                            );
                            LogUtils.logInfo(cmsObject, "EMAIL_ADMIN", "Email sent to admin", "Address: " + emailAdmin);
                        } catch (Exception e) {
                            allAdminEmailsSucceeded = false;
                            LogUtils.logError(cmsObject, "EMAIL_ADMIN", "Failed to send email to admin: " + emailAdmin, e);
                        }
                    }
                    
                    if (allAdminEmailsSucceeded) {
                        LogUtils.logInfo(cmsObject, "FORM_COMPLETE", "Form processing completed successfully");
                        out.print(responeObject(200, "Send mail success"));
                    } else {
                        LogUtils.logError(cmsObject, "FORM_PARTIAL", "Some admin emails failed to send");
                        out.print(responeObject(200, "Send mail success (partial)")); // Still return success to user
                    }
                    
                } catch(Exception e) {
                    LogUtils.logError(cmsObject, "FORM_ERROR", "Error in contact form processing", e);
                    out.print(responeObject(500, errMesageSendMailFails));  
                }
            } else {
                LogUtils.logInfo(cmsObject, "EMAIL_DISABLED", "Email sending is disabled, returning success");
                out.print(responeObject(200, "Send mail success"));
            }
        } catch (Exception e) {
            LogUtils.logError(cmsObject, "SYSTEM_ERROR", "Critical error in form processing", e);
            out.print(responeObject(500, "An unexpected error occurred"));
        }
%>
