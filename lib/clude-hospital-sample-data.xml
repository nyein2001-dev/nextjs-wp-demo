<!-- Enhanced Custom Dropdown Styles -->
              <style>
                /* Custom Multi-line Dropdown Styles */
                .custom-dropdown-select {
                    position: relative;
                    width: 100%;
                }

                .custom-dropdown-select__inner {
                    position: relative;
                    width: 100%;
                }

                /* Hidden native select for form submission */
                .custom-dropdown-select__native {
                    position: absolute;
                    opacity: 0;
                    pointer-events: none;
                    width: 100%;
                    height: 100%;
                    z-index: -1;
                }

                /* Custom dropdown trigger */
                .custom-dropdown-select__trigger {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    padding: 12px 16px;
                    border: 2px solid #e1e5e9;
                    border-radius: 6px;
                    background: white;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    min-height: 50px;
                    width: 100%;
                }

                .custom-dropdown-select__trigger:hover {
                    border-color: #c1c7cd;
                }

                .custom-dropdown-select__trigger.active {
                    border-color: #007bff;
                    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
                }

                .custom-dropdown-select__trigger:focus {
                    outline: none;
                    border-color: #007bff;
                    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
                }

                /* Dropdown label/placeholder */
                .custom-dropdown-select__label {
                    flex: 1;
                    text-align: left;
                    color: #6c757d;
                    white-space: normal;
                    word-wrap: break-word;
                    line-height: 1.4;
                    margin-right: 10px;
                    overflow-wrap: break-word;
                    hyphens: auto;
                }

                .custom-dropdown-select__label.selected {
                    color: #212529;
                    font-weight: 500;
                }

                /* Dropdown arrow */
                .custom-dropdown-select__arrow {
                    width: 0;
                    height: 0;
                    border-left: 6px solid transparent;
                    border-right: 6px solid transparent;
                    border-top: 6px solid #6c757d;
                    transition: transform 0.3s ease;
                    flex-shrink: 0;
                    margin-left: 8px;
                }

                .custom-dropdown-select__trigger.active .custom-dropdown-select__arrow {
                    transform: rotate(180deg);
                }

                /* Dropdown options container */
                .custom-dropdown-select__options {
                    position: absolute;
                    top: 100%;
                    left: 0;
                    right: 0;
                    background: white;
                    border: 2px solid #e1e5e9;
                    border-top: none;
                    border-radius: 0 0 6px 6px;
                    max-height: 300px;
                    overflow-y: auto;
                    z-index: 1000;
                    opacity: 0;
                    visibility: hidden;
                    transform: translateY(-10px);
                    transition: all 0.3s ease;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                }

                .custom-dropdown-select__options.show {
                    opacity: 1;
                    visibility: visible;
                    transform: translateY(0);
                }

                /* Individual option */
                .custom-dropdown-select__option {
                    padding: 12px 16px;
                    cursor: pointer;
                    transition: background-color 0.2s ease;
                    border-bottom: 1px solid #f8f9fa;
                    white-space: normal;
                    word-wrap: break-word;
                    line-height: 1.4;
                    overflow-wrap: break-word;
                    hyphens: auto;
                }

                .custom-dropdown-select__option:last-child {
                    border-bottom: none;
                }

                .custom-dropdown-select__option:hover {
                    background-color: #f8f9fa;
                }

                .custom-dropdown-select__option.selected {
                    background-color: #007bff;
                    color: white;
                }

                .custom-dropdown-select__option.disabled {
                    color: #6c757d;
                    cursor: not-allowed;
                    background-color: #f8f9fa;
                    opacity: 0.6;
                }

                .custom-dropdown-select__option.disabled:hover {
                    background-color: #f8f9fa;
                }

                .custom-dropdown-select__option:focus {
                    outline: none;
                    background-color: #e3f2fd;
                }

                /* Responsive design */
                @media (max-width: 768px) {
                    .custom-dropdown-select__trigger {
                        padding: 10px 12px;
                        min-height: 45px;
                    }
                    
                    .custom-dropdown-select__option {
                        padding: 10px 12px;
                    }

                    .custom-dropdown-select__label {
                        font-size: 14px;
                    }
                }

                /* Animation for smooth interactions */
                @keyframes fadeIn {
                    from {
                        opacity: 0;
                        transform: translateY(-5px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }

                .custom-dropdown-select__options.show {
                    animation: fadeIn 0.3s ease;
                }

                /* Integration with existing form styles */
                .input-text-field .custom-dropdown-select {
                    margin-bottom: 0;
                }

                .field-item .custom-dropdown-select {
                    width: 100%;
                }

                /* Ensure proper stacking context */
                .custom-dropdown-select {
                    z-index: 10;
                }

                .custom-dropdown-select__options {
                    z-index: 1001;
                }
              </style>

<label class="sr-only" for="select-service">${content.value.Dropdown.value.SelectAPruService}</label>
                                       
                                       <!-- Hidden native select for form submission -->
                                       <select class="custom-dropdown-select__native w-100" data-select-dropdown data-style data-live-search="true" aria-expanded="true"
                                                ${isCheckRequireATopic} id="select-service" name="select-service">
                                              <option disabled selected data-hidden="true" value="" >${content.value.Dropdown.value.SelectAPruService}</option>
                                             <c:forEach var="item" items="${content.value.Dropdown.valueList.DropdownOption}" varStatus="loop">
                                                 <option value="${item.value.OptionName}"
												     data-option-id="${item.value.OptionId}"
												     data-available="${item.value.IsAvailable}"
                                                     data-include-radio="${item.value.IncludeRadioSection}"
                                                     data-unavailable-text="${item.value.UnavailableText}">
													 ${item.value.OptionName}
												 </option>
                                             </c:forEach>
                                       </select>

                                       <!-- Custom dropdown trigger -->
                                       <div class="custom-dropdown-select__trigger" tabindex="0" role="combobox" aria-expanded="false" aria-haspopup="listbox">
                                           <span class="custom-dropdown-select__label">${content.value.Dropdown.value.SelectAPruService}</span>
                                           <span class="custom-dropdown-select__arrow"></span>
                                       </div>

                                       <!-- Custom dropdown options -->
                                       <div class="custom-dropdown-select__options" role="listbox">
                                           <c:forEach var="item" items="${content.value.Dropdown.valueList.DropdownOption}" varStatus="loop">
                                               <div class="custom-dropdown-select__option ${item.value.IsAvailable == 'true' ? '' : 'disabled'}"
                                                    data-value="${item.value.OptionName}"
                                                    data-option-id="${item.value.OptionId}"
                                                    data-available="${item.value.IsAvailable}"
                                                    data-include-radio="${item.value.IncludeRadioSection}"
                                                    data-unavailable-text="${item.value.UnavailableText}"
                                                    role="option"
                                                    tabindex="-1">
                                                   ${item.value.OptionName}
                                               </div>
                                           </c:forEach>
                                       </div>



<!-- Enhanced Custom Dropdown JavaScript -->
              <script>
                // Custom Multi-line Dropdown Functionality
                class CustomDropdown {
                    constructor(element) {
                        this.dropdown = element;
                        this.trigger = element.querySelector('.custom-dropdown-select__trigger');
                        this.options = element.querySelector('.custom-dropdown-select__options');
                        this.nativeSelect = element.querySelector('.custom-dropdown-select__native');
                        this.label = element.querySelector('.custom-dropdown-select__label');
                        this.arrow = element.querySelector('.custom-dropdown-select__arrow');
                        this.optionElements = element.querySelectorAll('.custom-dropdown-select__option');
                        
                        this.isOpen = false;
                        this.selectedOption = null;
                        
                        this.init();
                    }
                    
                    init() {
                        // Bind events
                        this.trigger.addEventListener('click', () => this.toggle());
                        this.trigger.addEventListener('keydown', (e) => this.handleKeydown(e));
                        
                        // Handle option clicks
                        this.optionElements.forEach(option => {
                            option.addEventListener('click', () => this.selectOption(option));
                            option.addEventListener('keydown', (e) => this.handleOptionKeydown(e, option));
                        });
                        
                        // Close dropdown when clicking outside
                        document.addEventListener('click', (e) => {
                            if (!this.dropdown.contains(e.target)) {
                                this.close();
                            }
                        });
                        
                        // Handle native select change (for form validation)
                        this.nativeSelect.addEventListener('change', () => {
                            this.updateFromNativeSelect();
                        });
                    }
                    
                    toggle() {
                        if (this.isOpen) {
                            this.close();
                        } else {
                            this.open();
                        }
                    }
                    
                    open() {
                        // Close other dropdowns first
                        document.querySelectorAll('.custom-dropdown-select__options.show').forEach(dropdown => {
                            if (dropdown !== this.options) {
                                dropdown.classList.remove('show');
                                dropdown.parentElement.querySelector('.custom-dropdown-select__trigger').classList.remove('active');
                                dropdown.parentElement.querySelector('.custom-dropdown-select__trigger').setAttribute('aria-expanded', 'false');
                            }
                        });
                        
                        this.isOpen = true;
                        this.trigger.classList.add('active');
                        this.trigger.setAttribute('aria-expanded', 'true');
                        this.options.classList.add('show');
                        
                        // Focus first available option
                        const firstAvailableOption = this.options.querySelector('.custom-dropdown-select__option:not(.disabled)');
                        if (firstAvailableOption) {
                            firstAvailableOption.focus();
                        }
                    }
                    
                    close() {
                        this.isOpen = false;
                        this.trigger.classList.remove('active');
                        this.trigger.setAttribute('aria-expanded', 'false');
                        this.options.classList.remove('show');
                        this.trigger.focus();
                    }
                    
                    selectOption(option) {
                        if (option.classList.contains('disabled')) {
                            return;
                        }
                        
                        // Remove previous selection
                        this.optionElements.forEach(opt => opt.classList.remove('selected'));
                        
                        // Add selection to clicked option
                        option.classList.add('selected');
                        this.selectedOption = option;
                        
                        // Update label
                        this.label.textContent = option.textContent;
                        this.label.classList.add('selected');
                        
                        // Update native select
                        const value = option.getAttribute('data-value');
                        this.nativeSelect.value = value;
                        
                        // Trigger change event on native select
                        const changeEvent = new Event('change', { bubbles: true });
                        this.nativeSelect.dispatchEvent(changeEvent);
                        
                        // Close dropdown
                        this.close();
                    }
                    
                    updateFromNativeSelect() {
                        const selectedValue = this.nativeSelect.value;
                        const correspondingOption = this.dropdown.querySelector(`[data-value="${selectedValue}"]`);
                        
                        if (correspondingOption) {
                            this.selectOption(correspondingOption);
                        }
                    }
                    
                    handleKeydown(e) {
                        switch (e.key) {
                            case 'Enter':
                            case ' ':
                                e.preventDefault();
                                this.toggle();
                                break;
                            case 'Escape':
                                this.close();
                                break;
                            case 'ArrowDown':
                                e.preventDefault();
                                if (!this.isOpen) {
                                    this.open();
                                } else {
                                    this.focusNextOption();
                                }
                                break;
                            case 'ArrowUp':
                                e.preventDefault();
                                if (this.isOpen) {
                                    this.focusPreviousOption();
                                }
                                break;
                        }
                    }
                    
                    handleOptionKeydown(e, option) {
                        switch (e.key) {
                            case 'Enter':
                            case ' ':
                                e.preventDefault();
                                this.selectOption(option);
                                break;
                            case 'Escape':
                                this.close();
                                break;
                            case 'ArrowDown':
                                e.preventDefault();
                                this.focusNextOption();
                                break;
                            case 'ArrowUp':
                                e.preventDefault();
                                this.focusPreviousOption();
                                break;
                        }
                    }
                    
                    focusNextOption() {
                        const availableOptions = Array.from(this.optionElements).filter(opt => !opt.classList.contains('disabled'));
                        const currentIndex = availableOptions.indexOf(document.activeElement);
                        const nextIndex = (currentIndex + 1) % availableOptions.length;
                        availableOptions[nextIndex].focus();
                    }
                    
                    focusPreviousOption() {
                        const availableOptions = Array.from(this.optionElements).filter(opt => !opt.classList.contains('disabled'));
                        const currentIndex = availableOptions.indexOf(document.activeElement);
                        const previousIndex = currentIndex <= 0 ? availableOptions.length - 1 : currentIndex - 1;
                        availableOptions[previousIndex].focus();
                    }
                }
                
                // Initialize all custom dropdowns when DOM is loaded
                document.addEventListener('DOMContentLoaded', function() {
                    const dropdownElements = document.querySelectorAll('.custom-dropdown-select');
                    dropdownElements.forEach(element => {
                        new CustomDropdown(element);
                    });
                });
              </script>
