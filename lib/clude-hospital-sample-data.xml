(function() {
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.dynamic-form-submission');
    
    if (!form) {
      return;
    }
    
    const submitUrl = form.getAttribute('data-url-submit');
    const redirectUrl = form.getAttribute('data-url-redirect');
    
    if (!submitUrl) {
      return;
    }
    
    const progressContainer = document.querySelector('.loader') || createProgressElement();
    const notificationElement = document.querySelector('[data-notification]') || createNotificationElement();
    
    const recaptchaElement = form.querySelector('.g-recaptcha[data-recaptcha]');
    const isRecaptchaEnabled = !!recaptchaElement;
    
    function verifyRecaptcha() {
      if (!isRecaptchaEnabled) {
        return true;
      }
      
      const recaptchaResponse = grecaptcha && grecaptcha.getResponse();
      
      if (!recaptchaResponse || recaptchaResponse.length === 0) {
        showNotification('Please complete the reCAPTCHA verification.', true);
        return false;
      }
      
      return true;
    }
    
    function validateFiles() {
      const fileInputs = form.querySelectorAll('input[type="file"]');
      let totalSize = 0;
      let isValid = true;
      let errorMessage = '';
      
      // Check each file input
      for (let i = 0; i < fileInputs.length; i++) {
        const input = fileInputs[i];
        const isRequired = input.hasAttribute('required');
        const files = input.files;
        
        // Check if required file input is empty
        if (isRequired && (!files || files.length === 0)) {
          isValid = false;
          const placeholder = input.getAttribute('placeholder') || 'File';
          errorMessage = `Please select a file for ${placeholder}.`;
          break;
        }
        
        // Check file size limits
        if (files && files.length > 0) {
          for (let j = 0; j < files.length; j++) {
            const file = files[j];
            const fileSizeMB = file.size / (1024 * 1024);
            totalSize += file.size;
            
            // Check individual file size (5MB limit)
            if (fileSizeMB > 5) {
              isValid = false;
              errorMessage = `File ${file.name} exceeds the maximum size of 5MB.`;
              break;
            }
          }
          
          if (!isValid) break;
        }
      }
      
      // Check total file size (20MB limit)
      const totalSizeMB = totalSize / (1024 * 1024);
      if (isValid && totalSizeMB > 20) {
        isValid = false;
        errorMessage = `Total file size exceeds the maximum of 20MB. Current total: ${totalSizeMB.toFixed(2)}MB.`;
      }
      
      if (!isValid) {
        showNotification(errorMessage, true);
      }
      
      return isValid;
    }
    
    function handleFormSubmit(event) {
      event.preventDefault();
      
      hideNotification();
      
      // Verify reCAPTCHA first
      if (!verifyRecaptcha()) {
        return;
      }
      
      // Validate files
      if (!validateFiles()) {
        return;
      }
      
      try {
        form.setAttribute('enctype', 'multipart/form-data');
        
        const formData = new FormData(form);
        
        showProgress();
        
        const xhr = new XMLHttpRequest();
        
        xhr.upload.addEventListener('progress', function(e) {
          // Progress tracking if needed
        });
        
        xhr.addEventListener('load', function() {
          hideProgress();
          
          if (xhr.status >= 200 && xhr.status < 300) {
            try {
              const response = JSON.parse(xhr.responseText.trim());
              
              if (response.statusCode === 200) {
                if (redirectUrl) {
                  window.location.href = redirectUrl;
                } else {
                  showNotification('Form submitted successfully!', false);
                }
              } else {
                showNotification(response.message || 'An error occurred during form submission.', true);
              }
            } catch (e) {
              showNotification('An unexpected error occurred. Please try again.', true);
            }
          } else {
            showNotification(`Server error: ${xhr.status} ${xhr.statusText}`, true);
          }
        });
        
        xhr.addEventListener('error', function(e) {
          hideProgress();
          showNotification('Network error. Please check your connection and try again.', true);
        });
        
        xhr.addEventListener('abort', function() {
          hideProgress();
          showNotification('Form submission was aborted.', true);
        });
        
        xhr.open('POST', submitUrl, true);
        xhr.send(formData);
      } catch (error) {
        hideProgress();
        showNotification('An error occurred while preparing the form data. Please try again.', true);
      }
    }
    
    function showProgress() {
      progressContainer.classList.remove('--hide');
    }
    
    function hideProgress() {
      progressContainer.classList.add('--hide');
    }
    
    function showNotification(message, isError = true) {
      const messageElement = notificationElement.querySelector('[data-notification-message]');
      if (messageElement) {
        messageElement.textContent = message;
      }
      
      notificationElement.classList.remove('d-none');
      
      if (isError) {
        notificationElement.classList.add('error');
      } else {
        notificationElement.classList.remove('error');
      }
      
      notificationElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
    
    function hideNotification() {
      notificationElement.classList.add('d-none');
    }
    
    function createProgressElement() {
      const element = document.createElement('div');
      element.className = 'loader --hide';
      element.innerHTML = `
        <div class="loader-wrapper">
          <div class="loader-wrapper-item">
            <div class="loader-item"></div>
            <div class="loader-item loader-item-2"></div>
            <div class="loader-item loader-item-3"></div>
            <div class="loader-item loader-item-4"></div>
            <div class="loader-item loader-item-5"></div>
            <div class="loader-item loader-item-6"></div>
            <div class="loader-item loader-item-7"></div>
            <div class="loader-item loader-item-8"></div>
            <div class="loader-item loader-item-9"></div>
            <div class="loader-item loader-item-10"></div>
            <div class="loader-item loader-item-11"></div>
            <div class="loader-item loader-item-12"></div>
          </div>
        </div>
      `;
      form.parentNode.appendChild(element);
      return element;
    }
    
    function createNotificationElement() {
      const element = document.createElement('div');
      element.className = 'notification-form d-none';
      element.setAttribute('data-notification', '');
      
      element.innerHTML = `
        <span class="icon icon-warning-triangle notification-form__icon"></span>
        <div class="notification-form__content">
          <div class="notification-form__title">Error</div>
          <div class="notification-form__desc" data-notification-message></div>
        </div>
      `;
      
      form.insertBefore(element, form.firstChild);
      return element;
    }
    
    form.setAttribute('enctype', 'multipart/form-data');
    
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'enctype') {
          if (form.getAttribute('enctype') !== 'multipart/form-data') {
            form.setAttribute('enctype', 'multipart/form-data');
          }
        }
      });
    });
    
    observer.observe(form, { attributes: true });
    
    form.addEventListener('submit', handleFormSubmit);
    
    if (window.$ && $.ajax) {
      const originalAjaxSubmit = $.ajax;
      $.ajax = function(options) {
        if (options && options.url === submitUrl) {
          if (options.data instanceof FormData) {
            if (!verifyRecaptcha() || !validateFiles()) {
              if (options.error && typeof options.error === 'function') {
                options.error(null, 'error', 'Validation failed');
              }
              return {
                abort: function() {},
                fail: function() { return this; },
                always: function() { return this; }
              };
            }
          }
        }
        return originalAjaxSubmit.apply(this, arguments);
      };
    }
    
    const existingSubmitHandler = form.onsubmit;
    if (existingSubmitHandler) {
      form.onsubmit = function(event) {
        event.preventDefault();
        
        if (!verifyRecaptcha() || !validateFiles()) {
          return false;
        }
        
        return existingSubmitHandler.call(this, event);
      };
    }
  });
})();
