<%@ page session="false" contentType="text/html;charset=UTF-8" %>
<%@ page import="java.sql.*,
                 java.io.*,
                 java.net.*,
                 javax.net.*,
                 org.json.JSONObject,
                 org.opencms.main.OpenCms,
                 org.apache.commons.logging.Log,
                 org.opencms.main.CmsLog,
                 org.apache.commons.lang.StringUtils,
                 java.util.*,
                 org.opencms.jsp.util.*,
                 java.io.IOException,
                 java.text.*,
                 org.apache.commons.fileupload.FileItem,
                 org.apache.commons.fileupload.*,
                 org.apache.commons.fileupload.disk.*,
                 org.apache.commons.fileupload.servlet.*" %>
<%@ page import="org.opencms.mail.CmsHtmlMail"%>
<%@page import="java.util.Locale" %>
<%@page import="org.opencms.jsp.CmsJspActionElement"%>
<%@ page import="org.apache.commons.io.FilenameUtils" %>
<%@ page import="org.apache.commons.mail.EmailAttachment" %>
<%@ taglib prefix="cms" uri="http://www.opencms.org/taglib/cms"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
<%@page import="org.opencms.jsp.*, org.opencms.file.*, org.opencms.flex.*,org.opencms.util.*, java.util.*" %>
<c:set var="locale" value="${cms.locale}" />
<fmt:setLocale value="${param.language}" />

<%
//paramSelectTopic
String paramSelectTopic = StringUtils.isEmpty(request.getParameter("selectTopic")) ? "" : request.getParameter("selectTopic");
String[] paramSelectTopics = paramSelectTopic.split("&&");

String paramSelectTopic2 = StringUtils.isEmpty(request.getParameter("selectTopic2")) ? "" : request.getParameter("selectTopic2");
String[] paramSelectTopics2 = paramSelectTopic2.split("&&");
%>

<cms:bundle basename="com.prudential.v2.ph.default">
  <c:set var="productTitle"><fmt:message key="key.default.have.productTitle" /></c:set>
  <c:set var="noProductTitle"><fmt:message key="key.default.none.productTitle" /></c:set>
  <c:set var="adminMailSubject"><fmt:message key="key.default.admin.mail.subject" /></c:set>
  <c:set var="paramSelectTopics"><%=paramSelectTopics[0]%></c:set>
  <c:set var="emailEnquiry" value=""/>
  <c:if test="${not empty paramSelectTopics}">
  	<c:set var="emailEnquiry"><fmt:message key="key.mail.selected.enquiry.${paramSelectTopics}" /></c:set>
  </c:if>
</cms:bundle>
<%!
	public String A1filter(String input){
	    String tem = input;
	    tem = tem.replaceAll("<", "&lt;");
	    tem = tem.replaceAll(">", "&gt;");
	    tem = tem.replaceAll("&", "&amp;");
	    tem = tem.replaceAll("\"", "&quot;");
	    tem = tem.replaceAll(" ", "&nbsp;");
	    tem = tem.replaceAll("'", "&#39;");
	    return tem;
	}
    public String A1filterHidden(String input,String temp){
	    String tem = temp;
	    String tmpinput = "content:'" + input + "'; mso-hide:all;display:none;";
	    tem = tem.replaceAll(tmpinput, "");
	    return tem;
    }
    public  String A1filter(String input,String value,String temp){
        String tem = temp;
        tem = tem.replaceAll(input, value);
        return tem;
    }
    public String A1filterNoProductTitle(String productTitleName,String temp,String noProductTitle){
        String tem = temp;
        tem = tem.replaceAll(productTitleName, noProductTitle);
        return tem;
    }
    public String responseObject(int statusCode,String message) {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        sb.append("\"statusCode\":").append(statusCode).append(",");
        sb.append("\"message\":\"").append(message).append("\"");
        sb.append("}");
        return sb.toString();
    }
	
    // Modified to ensure proper stream closing
    public File createTempFileFromInputStream(InputStream inputStream, String tmpFileName, String fileExtension) throws IOException {
        OutputStream outputStream = null;
        File tempFile = null;

        try {
            tempFile = File.createTempFile(tmpFileName, fileExtension);
            outputStream = new FileOutputStream(tempFile);
            byte[] buffer = new byte[4096];
            int length;
            while ((length = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, length);
            }
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException e) {
                    // Log exception but continue
                }
            }
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    // Log exception but continue
                }
            }
        }
        return tempFile;
    }
%>
<%
        CmsJspActionElement cms = new CmsJspActionElement(pageContext, request, response);
        CmsObject cmsObject = cms.getCmsObject();
        Locale locale = cms.getRequestContext().getLocale(); 
        String productTitleParam = pageContext.getAttribute("productTitle").toString();
        String noProductTitleParam = pageContext.getAttribute("noProductTitle").toString();

        // Hardcoded values like in new-contact-form.jsp
        String SendEmail = "true";
        Boolean isSendEmail = Boolean.valueOf(SendEmail);

        // get content tempalate mail admin
        String templateContentAdmin = ".galleries/mail-template/pru-admin-contact-us-email-template.html";
        CmsResource resource = cmsObject.readResource(templateContentAdmin);
        CmsFile file = cmsObject.readFile(resource);
        byte[] contentAdmin = file.getContents();
        String mailContent = new String(contentAdmin);

        // get content tempalate mail user
        String templateContentUser = ".galleries/mail-template/pru-contact-us-email-template.html";
        CmsResource resourceUser = cmsObject.readResource(templateContentUser);
        CmsFile fileUser = cmsObject.readFile(resourceUser);
        byte[] contentUser = fileUser.getContents();
        String mailContentUser = new String(contentUser);

        // mail admin in dialog
        String emailAddressAdmin = "nyein@ncto.my";
        // mail user in xml file
        String emailAddressUser = "";
        // mail subject
        String topic = StringUtils.isEmpty(paramSelectTopic) ? "" : paramSelectTopics[1];
        String topic2 = StringUtils.isEmpty(paramSelectTopic2) ? "" : paramSelectTopics2[1];
        String adminMailSubject = pageContext.getAttribute("adminMailSubject").toString();
        adminMailSubject = adminMailSubject.replace("#Topic#", topic);
        String mailSubject = "Web Request: ";
        mailSubject = mailSubject.replace("#Topic#", topic);

        String adminMailSubject2 = "";
        if(!StringUtils.isEmpty(adminMailSubject2)) {
            adminMailSubject2 = adminMailSubject2.replace("#Topic#", topic);
            adminMailSubject = adminMailSubject2;
        }

        // messge send mail fails
        String errMesageSendMailFails = "The form is incomplete. Please check.";
        // Section Title 1
        String section1 = "";
        if(!StringUtils.isEmpty(section1)){
            String temp = "%class" + "Section1" + "%";
            mailContent = A1filterHidden(temp, mailContent);
            mailContentUser = A1filterHidden(temp, mailContentUser);
        }
        // Section Label 2
        String section2 = "";
        if(!StringUtils.isEmpty(section2)){
            String temp = "%class" + "Section2" + "%";
            mailContent = A1filterHidden(temp, mailContent);
            mailContentUser = A1filterHidden(temp, mailContentUser);
        }
        // Section Label 3
        String section3 = "";
        if(!StringUtils.isEmpty(section3)){
            String temp = "%class" + "Section3" + "%";
            mailContent = A1filterHidden(temp, mailContent);
            mailContentUser = A1filterHidden(temp, mailContentUser);
        }
        // Section Label 5
        String section5 = "";
        if(!StringUtils.isEmpty(section5)){
            String temp = "%class" + "Section5" + "%";
            mailContent = A1filterHidden(temp, mailContent);
            mailContentUser = A1filterHidden(temp, mailContentUser);
        } 
        
        if(isSendEmail){
            try{
                String firstName = "";
                String lastName = "";
                String policy_number = "";
                String marketingConsent = "";
				String selectedService = "";
                List<Map<String, Object>> uploadedFiles = new ArrayList<Map<String, Object>>();
                long totalFileSize = 0;
                final long MAX_TOTAL_SIZE = 20 * 1024 * 1024; // 20MB in bytes

                if (ServletFileUpload.isMultipartContent(request)) {
                    // Create a factory for disk-based file items
                    DiskFileItemFactory factory = new DiskFileItemFactory();
                    // Create a new file upload handler
                    ServletFileUpload upload = new ServletFileUpload(factory);
                    // Set overall request size constraint
                    upload.setSizeMax(MAX_TOTAL_SIZE);
                    
                    // Parse the request
                    List<FileItem> items = upload.parseRequest(request);

                    for (FileItem item : items) {
                        try {
                            if (item.isFormField()) {
                                String parameterName = item.getFieldName();
                                String value = item.getString();

                                if ("selectTopic".equals(parameterName)) {
                                    value = topic;
                                } else {
                                    value = A1filter(value);
                                }
                                if ("selectTopic2".equals(parameterName)) {
                                    value = topic2;
                                }
                                 if (!StringUtils.isEmpty(value)) {
                                    String temp = "%class" + parameterName + "%";
                                    mailContent = A1filterHidden(temp, mailContent);
                                    mailContent = A1filter("%" + parameterName + "%", value, mailContent);
                                }

                                if ("first-name".equals(parameterName)) {
                                    firstName = value;
                                }
                                if ("last-name".equals(parameterName)) {
                                    lastName = value;
                                }
                                if ("email-address".equals(parameterName)) {
                                    emailAddressUser = value;
                                }
                                if ("product-title".equals(parameterName)) {
                                    String nameTitle = "%key-" + parameterName + "%";
                                    if (StringUtils.isEmpty(value)) {
                                        mailContent = A1filterNoProductTitle(nameTitle, mailContent, noProductTitleParam);
                                        mailContentUser = A1filterNoProductTitle(nameTitle, mailContentUser, noProductTitleParam);
                                    } else {
                                        String productTitle = productTitleParam + " " + value;
                                        mailContent = A1filter(nameTitle, productTitle, mailContent);
                                        mailContentUser = A1filter(nameTitle, productTitle, mailContentUser);
                                    }
                                }
                                if ("policy-number".equals(parameterName)) {
                                    policy_number = value;
                                }
                                if ("marketingConsent".equals(parameterName)) {
                                    marketingConsent = "Yes";
                                }
                                if ("select-service".equals(parameterName) && !StringUtils.isEmpty(value)) {
                                    selectedService = value;
									String temp = "%class" + parameterName + "%";
                                    mailContentUser = A1filterHidden(temp, mailContentUser);
                                    mailContentUser = A1filter("%" + parameterName + "%", value, mailContentUser);
                                    selectedService = selectedService.replace("&nbsp;", " ");
                                }
								if("product-title".equals(parameterName) && !StringUtils.isEmpty(value) && StringUtils.isEmpty(selectedService)) {
								    selectedService = value;
									String temp = "%classselect-service%";
                                    mailContentUser = A1filterHidden(temp, mailContentUser);
                                    mailContentUser = A1filter("%select-service%", value, mailContentUser);
									mailContent = A1filterHidden(temp, mailContent);
                                    mailContent = A1filter("%select-service%", value, mailContent);
                                    selectedService = selectedService.replace("&nbsp;", " ");
								}
                            } else {
                                // Handle file upload
                                String fileName = item.getName();
                                if (fileName != null && !fileName.isEmpty() && item.getSize() > 0) {
                                    // Check if adding this file would exceed the total size limit
                                    if (totalFileSize + item.getSize() > MAX_TOTAL_SIZE) {
                                        throw new Exception("Total file size exceeds 20MB limit");
                                    }
                                    
                                    String fieldName = item.getFieldName();
                                    String fileExtension = FilenameUtils.getExtension(fileName);
                                    if (fileExtension != null && !fileExtension.isEmpty()) {
                                        fileExtension = "." + fileExtension;
                                    }
                                    
                                    // MODIFIED: Store file bytes instead of input stream
                                    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                                    InputStream inputStream = item.getInputStream();
                                    byte[] buffer = new byte[4096];
                                    int bytesRead;
                                    try {
                                        while ((bytesRead = inputStream.read(buffer)) != -1) {
                                            byteArrayOutputStream.write(buffer, 0, bytesRead);
                                        }
                                    } finally {
                                        try {
                                            inputStream.close();
                                        } catch (IOException e) {
                                            // Log exception but continue
                                        }
                                    }
                                    
                                    Map<String, Object> fileInfo = new HashMap<String, Object>();
                                    fileInfo.put("originalFileName", fileName);
                                    fileInfo.put("fieldName", fieldName);
                                    fileInfo.put("fileSize", item.getSize());
                                    fileInfo.put("fileExtension", fileExtension);
                                    // Store byte array instead of input stream
                                    fileInfo.put("fileBytes", byteArrayOutputStream.toByteArray());
                                    
                                    uploadedFiles.add(fileInfo);
                                    totalFileSize += item.getSize();
                                }
                            }
                        } catch (NullPointerException e) {
                            out.print(responseObject(500, "NullPointerException: " + e.getMessage()));
                        } catch (Exception e) {
                            out.print(responseObject(500, "Exception: " + e.getMessage()));
                        }
                    }
                }

                if (StringUtils.isEmpty(marketingConsent)) {
                    mailContent = mailContent.replace("%marketingConsent2%", "No");
                    mailContentUser = mailContentUser.replace("%marketingConsent2%", "No");
                } else {
                    mailContent = mailContent.replace("%marketingConsent2%", "Yes");
                    mailContentUser = mailContentUser.replace("%marketingConsent2%", "Yes");
                }

                if (StringUtils.isEmpty(policy_number)) {
                    mailContent = mailContent.replace("%policy-number%", "-");
                    mailContentUser = mailContentUser.replace("%policy-number%", "-");
                }
				
				StringBuilder maskedPolicyNumberBuilder = new StringBuilder(); 
			
			// Append asterisks for the first 3 digits 
			for (int i = 0; i < 4; i++) {
				maskedPolicyNumberBuilder.append('*'); 
			} 
			
			// Append the last 4 digits of the policy number 
			maskedPolicyNumberBuilder.append(policy_number.substring(policy_number.length() - 4));
			String policyNumber = maskedPolicyNumberBuilder.toString(); 

 			if (!StringUtils.isEmpty(policyNumber.trim())) {
                String temp = "%class" + "policy-number" + "%";
                //mailContent = A1filterHidden(temp, mailContent);
                mailContentUser = A1filterHidden(temp, mailContentUser);
                //mailContent = A1filter("%" + "policy-number" + "%", policyNumber, mailContent);
                mailContentUser = A1filter("%" + "policy-number" + "%", policyNumber, mailContentUser);
            }

                String fullName = firstName + " " + lastName;
                if (!StringUtils.isEmpty(fullName.trim())) {
                    String temp = "%class" + "fullName" + "%";
                    mailContent = A1filterHidden(temp, mailContent);
                    mailContentUser = A1filterHidden(temp, mailContentUser);
                    mailContent = A1filter("%" + "fullName" + "%", fullName, mailContent);
                    mailContentUser = A1filter("%" + "fullName" + "%", fullName, mailContentUser);
                }
				
				String[] parts = emailAddressUser.split("@");
			String username = parts[0];
			String domain = parts[1];
							
			// Masking the username
			StringBuilder maskedUsernameBuilder = new StringBuilder();
				for (int i = 0; i < username.length(); i++) {
					if (i == 0 || i == username.length() - 1) {
						maskedUsernameBuilder.append(username.charAt(i)); // Keep the last character visible
					} else {
						maskedUsernameBuilder.append("*"); // Replace other characters with asterisks
					}
				}
			
			String maskedUsername = maskedUsernameBuilder.toString();
			String emailAdressUsers = maskedUsername + "@" + domain;

			
			if (!StringUtils.isEmpty(emailAdressUsers.trim())) {
                String temp = "%class" + "email-address" + "%";
                //mailContent = A1filterHidden(temp, mailContent);
                mailContentUser = A1filterHidden(temp, mailContentUser);
                //mailContent = A1filter("%" + "email-address" + "%", emailAdressUsers, mailContent);
                mailContentUser = A1filter("%" + "email-address" + "%", emailAdressUsers, mailContentUser);
            }

                List<String> emailAddressAdmins = new ArrayList<String>();
                String emailEnquiry = pageContext.getAttribute("emailEnquiry").toString();
                if (!StringUtils.isEmpty(emailEnquiry) && !StringUtils.isEmpty(paramSelectTopic)) {
                    emailAddressAdmins = Arrays.asList(emailEnquiry.split(","));
                } else {
                    emailAddressAdmins = Arrays.asList(emailAddressAdmin.split(","));
                }

                if (!StringUtils.isEmpty(emailAddressUser) && !StringUtils.isEmpty(mailSubject) ) {
				
				  if(uploadedFiles != null && !uploadedFiles.isEmpty()) {
                    // Add attachment information to email content
                    StringBuilder attachmentInfo = new StringBuilder();
					
                    attachmentInfo.append("<tr><td class='titlerowpadding'><table class='titlerow'' style='width: 100%; ' align='left' border='0' cellpadding='0' cellspacing='0'>");
                    attachmentInfo.append("<tr><td class='bordertitle'>SUBMITTED DOCUMENTS</td></tr></table></td></tr>");
                    
                    for (Map<String, Object> fileInfo : uploadedFiles) {
                        String fieldName = (String)fileInfo.get("fieldName");
                        String originalFileName = (String)fileInfo.get("originalFileName");
                        attachmentInfo.append("<tr><td class='innerpaddingbody'><table width='220' align='left' border='0' cellpadding='0' cellspacing='0' ><tr><td class='colortxtleft'>");
                        attachmentInfo.append("<strong>").append(fieldName).append(":</strong> ");
						attachmentInfo.append("</td></tr></table><!--[if (gte mso 9)|(IE)]><table width='330' align='left' cellpadding='0' cellspacing='0' border='0' style='padding-top:0;'><tr><td><![endif]--><table class='col380' align='left' border='0' cellpadding='0' cellspacing='0' style='width: 100%; max-width: 330px; '><tr><td>");
                        attachmentInfo.append(originalFileName);
                        attachmentInfo.append("</td></tr></table><!--[if (gte mso 9)|(IE)]></td></tr></table><![endif]--></td></tr>");
                    }
					
					mailContent = mailContent.replace("<!--DYNAMIC-FIELDS-->", attachmentInfo.toString());
					mailContentUser = mailContentUser.replace("<!--DYNAMIC-FIELDS-->", attachmentInfo.toString());
					}

                    // Send to user
                    CmsHtmlMail smToCs = new CmsHtmlMail();
                    smToCs.setMsg(mailContentUser);
                    smToCs.setSubject(mailSubject + " <" + selectedService +  "> - PN: <" + policyNumber + ">");
                    smToCs.setCharset("UTF-8");
                    smToCs.setFrom((String) emailAddressAdmins.get(0));
                    smToCs.addTo(emailAddressUser);

                    // MODIFIED: Add attachments to user email if needed
                    // This is optional - if you want to send attachments to the user as well
                    List<File> userTempFiles = new ArrayList<File>();
                    if (!uploadedFiles.isEmpty()) {
                        for (Map<String, Object> fileInfo : uploadedFiles) {
                            String fileNameMTP = (String)fileInfo.get("fieldName") + "_" + fullName + "_";
                            
                            // Create a new ByteArrayInputStream for each attachment
                            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[])fileInfo.get("fileBytes"));
                            
                            File tempFile = createTempFileFromInputStream(
                                byteArrayInputStream,
                                fileNameMTP,
                                (String)fileInfo.get("fileExtension")
                            );
                            userTempFiles.add(tempFile);
                            
                            // Uncomment if you want to send attachments to the user as well
                            /*
                            EmailAttachment attachment = new EmailAttachment();
                            attachment.setPath(tempFile.getAbsolutePath());
                            attachment.setName((String)fileInfo.get("originalFileName"));
                            attachment.setDisposition(EmailAttachment.ATTACHMENT);
                            smToCs.attach(attachment);
                            */
                        }
                    }

                    smToCs.send();

                    // Clean up user temp files
                    for (File tempFile : userTempFiles) {
                        tempFile.deleteOnExit();
                    }
                } else {
                    out.print(responseObject(500, "send mail failed"));
                }

                // Send to admins with attachments
                for (String emailAdmin : emailAddressAdmins) {
                    CmsHtmlMail smToCsAdmin = new CmsHtmlMail();
                    smToCsAdmin.setMsg(mailContent);
                    smToCsAdmin.setSubject(mailSubject + " <" + selectedService +  "> - PN: <" + policy_number + ">");
                    smToCsAdmin.setCharset("UTF-8");
                    smToCsAdmin.setFrom(emailAddressUser);
                    smToCsAdmin.addTo(emailAdmin);

                    // MODIFIED: Create new ByteArrayInputStream for each admin recipient
                    List<File> tempFiles = new ArrayList<File>();
                    for (Map<String, Object> fileInfo : uploadedFiles) {
                        String fileNameMTP = (String)fileInfo.get("fieldName") + "_" + fullName + "_";
                        
                        // Create a new ByteArrayInputStream for each attachment
                        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream((byte[])fileInfo.get("fileBytes"));
                        
                        File tempFile = createTempFileFromInputStream(
                            byteArrayInputStream,
                            fileNameMTP,
                            (String)fileInfo.get("fileExtension")
                        );
                        tempFiles.add(tempFile);

                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(tempFile.getAbsolutePath());
                        attachment.setName((String)fileInfo.get("originalFileName"));
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        smToCsAdmin.attach(attachment);
                    }

                    smToCsAdmin.send();

                    // Clean up temp files
                    for (File tempFile : tempFiles) {
                        tempFile.deleteOnExit();
                    }
                }
                out.print(responseObject(200, "send mail success"));
            } catch (Exception e) {
                out.print(responseObject(500, "Error: " + e.getMessage()));
            }
        } else {
            out.print(responseObject(500, "send mail failed"));
        }
%> 
